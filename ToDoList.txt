==============================
 ENCFILE ‚Äì ROADMAP / TODO LIST
==============================

üéØ OBJETIVO:
Desarrollar una aplicaci√≥n en C++17 que permita a los usuarios
registrarse, iniciar sesi√≥n y cifrar/descifrar archivos locales
dentro de una b√≥veda personal mediante interfaz de consola.

------------------------------------------------------------
üß± FASE 1 ‚Äì ESTRUCTURA INICIAL DEL PROYECTO
------------------------------------------------------------
[X] 1. Crear estructura de carpetas:
        /include
        /src
        /data
        main.cpp
        Makefile
[X] 2. Configurar Makefile b√°sico para compilar todos los .cpp
[X] 3. Probar que el proyecto compila y ejecuta "Hola mundo"

------------------------------------------------------------
üë§ FASE 2 ‚Äì GESTI√ìN DE USUARIOS
------------------------------------------------------------
[X] 4. Crear clase User (User.h / User.cpp)
        - Atributos: nombre, contrase√±a
        - M√©todos: registrarUsuario(), iniciarSesion()
[X] 5. Crear archivo "users.dat" dentro de /data/
[X] 6. Implementar guardado y lectura binaria de usuarios
[X] 7. Comprobar registro e inicio de sesi√≥n en consola
[X] 8. Crear carpeta individual por usuario: /data/<nombre_usuario>/

------------------------------------------------------------
üìÇ FASE 3 ‚Äì INTERFAZ PRINCIPAL
------------------------------------------------------------
[X] 9. En main.cpp ‚Üí Men√∫ principal:
        1. Registrarse
        2. Iniciar sesi√≥n
        3. Salir
[X] 10. Men√∫ del usuario autenticado:
        1. Cifrar archivo
        2. Descifrar archivo
        3. Listar archivos cifrados
        4. Eliminar archivo
        5. Cerrar sesi√≥n
[ ] 11. Controlar validaciones y errores de entrada

------------------------------------------------------------
üîê FASE 4 ‚Äì CIFRADO Y DESCIFRADO
------------------------------------------------------------
[ ] 12. Crear clase Vault (Vault.h / Vault.cpp)
[ ] 13. Implementar funciones:
        - cifrarArchivo(ruta, clave)
        - descifrarArchivo(ruta, clave)
[ ] 14. Usar cifrado XOR simple byte a byte
[ ] 15. Guardar los archivos cifrados en /data/<usuario>/
        con extensi√≥n .enc
[ ] 16. Crear o actualizar archivo vault_index.txt con
        la lista de archivos cifrados
[ ] 17. A√±adir opci√≥n para listar y eliminar archivos cifrados

------------------------------------------------------------
üß† FASE 5 ‚Äì UTILIDADES Y MEJORAS
------------------------------------------------------------
[ ] 18. Crear m√≥dulo Utils (Utils.h / Utils.cpp)
        - Funciones auxiliares: lectura binaria, validaci√≥n, etc.
[ ] 19. Implementar comprobaci√≥n si un archivo existe
        (std::filesystem::exists)
[ ] 20. A√±adir control de errores en todas las operaciones
        (abrir archivo, permisos, etc.)
[ ] 21. Mejorar mensajes por consola (formato, colores opcionales)
[ ] 22. Probar flujo completo: registrar ‚Üí cifrar ‚Üí descifrar

------------------------------------------------------------
üì¶ FASE 6 ‚Äì TESTS Y PULIDO FINAL
------------------------------------------------------------
[ ] 23. Crear varios usuarios y probar rutas separadas
[ ] 24. Cifrar archivos de texto e imagen para comprobar integridad
[ ] 25. Asegurar que los archivos descifrados coinciden con el original
[ ] 26. Revisar cierres de ficheros y fugas de memoria
[ ] 27. Documentar c√≥digo con comentarios
[ ] 28. Escribir README.md completo
[ ] 29. Subir a GitHub con commit inicial